use super::request::OAuthRequest;
use oxide_auth::endpoint::OAuthError as EndpointError;
use oxide_auth::frontends::simple::endpoint::Error as SimpleError;
use poem::error::{BadRequest, InternalServerError, Unauthorized};
use poem::http::StatusCode;
use thiserror::Error;

/// Errors that may be generated by this crate.
/// - Request
/// - Authorization
/// - Header
/// - Server
///    - This is the general server error.
#[derive(Clone, Debug, Error)]
pub enum OxidePoemError {
    /// This is returned when the client request cannot be properly parsed
    #[error("There was a problem with the request")]
    Request,
    /// This is returned when the client request contains an invalid "Authorization" header
    #[error("Invalid Authorization Header")]
    Authorization,
    /// This is for header parsing related errors (server side)
    #[error("Error while parsing header: {0}")]
    Header(String),
    #[error("There was a problem with the server")]
    /// This is the general server error.
    Server,
}

impl From<OxidePoemError> for poem::Error {
    fn from(ox_err: OxidePoemError) -> Self {
        match &ox_err {
            OxidePoemError::Request => BadRequest(ox_err),
            OxidePoemError::Authorization => Unauthorized(ox_err),
            OxidePoemError::Header(_) | OxidePoemError::Server => InternalServerError(ox_err),
        }
    }
}

/// Generic error type produced by Oxide Auth operations that can be coerced into an `poem::Error`
pub struct OAuthError(poem::Error);

impl From<SimpleError<OAuthRequest>> for OAuthError {
    fn from(error: SimpleError<OAuthRequest>) -> Self {
        let poem_error = match error {
            SimpleError::Web(p) => p.into(),
            SimpleError::OAuth(oauth) => {
                let status = match oauth {
                    EndpointError::BadRequest | EndpointError::DenySilently => StatusCode::BAD_REQUEST,
                    EndpointError::PrimitiveError => StatusCode::INTERNAL_SERVER_ERROR,
                };

                poem::Error::new(oauth, status)
            }
        };

        OAuthError(poem_error)
    }
}

impl From<poem::Error> for OAuthError {
    fn from(e: poem::Error) -> Self {
        OAuthError(e)
    }
}

impl From<OAuthError> for poem::Error {
    fn from(value: OAuthError) -> poem::Error {
        value.0
    }
}
